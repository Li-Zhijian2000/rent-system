{"remainingRequest":"/home/zhijian/fourth/javaweb/rent-system/rent-vue-4.0/node_modules/babel-loader/lib/index.js!/home/zhijian/fourth/javaweb/rent-system/rent-vue-4.0/src/mock/mock.js","dependencies":[{"path":"/home/zhijian/fourth/javaweb/rent-system/rent-vue-4.0/src/mock/mock.js","mtime":1591962927778},{"path":"/home/zhijian/fourth/javaweb/rent-system/rent-vue-4.0/node_modules/cache-loader/dist/cjs.js","mtime":1591895249737},{"path":"/home/zhijian/fourth/javaweb/rent-system/rent-vue-4.0/node_modules/babel-loader/lib/index.js","mtime":1591895249725}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/web.dom.iterable\";\nimport axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\nimport Mock from 'mockjs';\nvar mock = new MockAdapter(axios);\nvar Random = Mock.Random;\nRandom.increment();\nmock.onPost('/account/login').reply(function (config) {\n  var body = JSON.parse(config.data);\n\n  if (body.username === 'zhijian' && body.password === '123456') {\n    var _data = {\n      username: body.username,\n      role: 'ROLE_TENANT'\n    };\n    return [200, _data];\n  }\n\n  return [600, {}];\n});\nvar data = Mock.mock({\n  'room|5': [{\n    id: '@increment()',\n    roomNumber: '@increment(100)',\n    'type|1': [1, 2, 4],\n    'lived': 0,\n    rent: '@integer(1, 30)',\n    'checkList': [],\n    'status': 0,\n    repaired: '@boolean()'\n  }]\n});\n\nvar computeStatus = function computeStatus(item) {\n  item.status = item.repaired ? 2 : item.lived < item.type ? 0 : 1;\n};\n\ndata.room.forEach(function (item) {\n  item.rent *= 100;\n  item.id--;\n  item.checkList = [0, 1];\n  item.lived = Math.floor(item.type / 2);\n  computeStatus(item);\n});\nmock.onGet('/room/list').reply(function (config) {\n  var _config$params = config.params,\n      type = _config$params.type,\n      status = _config$params.status,\n      checkList = _config$params.checkList,\n      _config$params$page = _config$params.page,\n      page = _config$params$page === void 0 ? 1 : _config$params$page,\n      _config$params$limit = _config$params.limit,\n      limit = _config$params$limit === void 0 ? 20 : _config$params$limit,\n      sort = _config$params.sort;\n  var mockList = data.room.filter(function (item) {\n    if (type && item.type !== +type) return false;\n    if (checkList && !checkList.every(function (v) {\n      return item.checkList.includes(v);\n    })) return false;\n    if (status && item.status !== status) return false;\n    return true;\n  });\n  var pageList = mockList.filter(function (item, index) {\n    return index < limit * page && index >= limit * (page - 1);\n  });\n  return [200, {\n    data: {\n      total: mockList.length,\n      items: pageList\n    }\n  }];\n});\nmock.onPost('/room/update').reply(function (config) {\n  var query = JSON.parse(config.data);\n  console.log(query);\n  computeStatus(query);\n  var index = data.room.findIndex(function (v) {\n    return v.id === query.id;\n  });\n  console.log(index);\n\n  if (index !== -1) {\n    data.room[index] = query;\n  } else {\n    query.id = Random.increment();\n    data.room.unshift(query);\n  }\n\n  return [200, {}];\n});\nmock.onGet('/housing').reply(function (config) {\n  var params = config.params;\n  return [200, {\n    data: data.housing[params.id]\n  }];\n});\nmock.onGet('/housings').reply(function (config) {\n  var params = config.params;\n  return [200, {\n    data: data.housing\n  }];\n});",{"version":3,"sources":["/home/zhijian/fourth/javaweb/rent-system/rent-vue-4.0/src/mock/mock.js"],"names":["axios","MockAdapter","Mock","mock","Random","increment","onPost","reply","config","body","JSON","parse","data","username","password","role","id","roomNumber","rent","repaired","computeStatus","item","status","lived","type","room","forEach","checkList","Math","floor","onGet","params","page","limit","sort","mockList","filter","every","v","includes","pageList","index","total","length","items","query","console","log","findIndex","unshift","housing"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport MockAdapter from 'axios-mock-adapter'\nimport Mock from 'mockjs'\n\nconst mock = new MockAdapter(axios)\nconst Random = Mock.Random\nRandom.increment()\n\nmock.onPost('/account/login').reply(config => {\n    const body = JSON.parse(config.data)\n    if (body.username === 'zhijian' && body.password === '123456') {\n        const data = {\n            username: body.username,\n            role: 'ROLE_TENANT'\n        }\n        return [200, data]\n    }\n    return [600, {}]\n})\n\nconst data = Mock.mock({\n    'room|5': [{\n        id: '@increment()',\n        roomNumber: '@increment(100)',\n        'type|1': [1, 2, 4],\n        'lived': 0,\n        rent: '@integer(1, 30)',\n        'checkList': [],\n        'status': 0,\n        repaired: '@boolean()'\n    }]\n})\nconst computeStatus = item => {\n    item.status = item.repaired ? 2 :\n                  item.lived < item.type ? 0 : 1    \n}\n\ndata.room.forEach(item => {\n    item.rent *= 100\n    item.id--\n    item.checkList = [0, 1]\n    item.lived = Math.floor(item.type / 2)\n    computeStatus(item)\n})\n\nmock.onGet('/room/list').reply(config => {\n    const { type, status, checkList, page = 1, limit = 20, sort } = config.params\n\n    let mockList = data.room.filter(item => {\n        if (type && item.type !== +type) return false\n        if (checkList && !checkList.every(v => item.checkList.includes(v))) return false\n        if (status && item.status !== status) return false\n        return true\n    })\n    const pageList = mockList.filter((item, index) => index < limit * page && index >= limit * (page - 1))\n\n    return [200, { data: { total: mockList.length, items: pageList }}]\n})\n\nmock.onPost('/room/update').reply(config => {\n    const query = JSON.parse(config.data)\n    console.log(query)\n    computeStatus(query)\n    const index = data.room.findIndex(v => v.id === query.id)\n    console.log(index)\n    if (index !== -1) {\n        data.room[index] = query\n    } else {\n        query.id = Random.increment()\n        data.room.unshift(query)\n    }\n    return [200, {}]\n})\nmock.onGet('/housing').reply(config => {\n    const params = config.params\n    return [200, { data: data.housing[params.id] }]\n})\n\nmock.onGet('/housings').reply(config => {\n    const params = config.params\n    return [200, { data: data.housing }]\n})"]}]}