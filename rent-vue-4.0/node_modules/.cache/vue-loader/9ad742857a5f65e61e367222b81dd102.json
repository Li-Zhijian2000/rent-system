{"remainingRequest":"/home/zhijian/fourth/javaweb/rent-system/rent-vue-4.0/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/zhijian/fourth/javaweb/rent-system/rent-vue-4.0/src/views/rms/Room.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/zhijian/fourth/javaweb/rent-system/rent-vue-4.0/src/views/rms/Room.vue","mtime":1591974070629},{"path":"/home/zhijian/fourth/javaweb/rent-system/rent-vue-4.0/node_modules/cache-loader/dist/cjs.js","mtime":1591895249737},{"path":"/home/zhijian/fourth/javaweb/rent-system/rent-vue-4.0/node_modules/babel-loader/lib/index.js","mtime":1591895249725},{"path":"/home/zhijian/fourth/javaweb/rent-system/rent-vue-4.0/node_modules/cache-loader/dist/cjs.js","mtime":1591895249737},{"path":"/home/zhijian/fourth/javaweb/rent-system/rent-vue-4.0/node_modules/vue-loader/lib/index.js","mtime":1591895249413}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// import waves from '@/directive/waves' // waves directive\nimport Pagination from '@/components/Pagination' // secondary package based on el-pagination\n\nexport default {\n  name: 'ComplexTable',\n  components: { Pagination },\n  // directives: { waves },\n  computed: {\n    username() {\n      return sessionStorage.getItem('username')\n    }\n  },\n  data() {\n    return {\n      tableKey: 0,\n      list: null,\n      total: 0,\n      listLoading: true,\n      listQuery: {\n        page: 1,\n        limit: 20,\n        type: \"\",\n        status: \"\",\n        checkList: [],\n        sort: '+id'\n      },\n      sortOptions: [{ label: 'ID Ascending', key: '+id' }, { label: 'ID Descending', key: '-id' }],\n      hash: {\n        type: {\n          1: '单人间',\n          2: '双人间',\n          4: '四人间'\n        },\n        status: {\n          0: '未满',\n          1: '已满',\n          2: '维修中'\n        },\n        checkList: {\n          0: '空调',\n          1: '独卫',\n          2: '洗衣机'\n        }\n      },\n      typeOptions: [\n        {\n          value: 1,\n          label: '单人间'\n        },\n        {\n          value: 2,\n          label: '双人间'\n        },\n        {\n          value: 4,\n          label: '四人间'\n        }],\n      statusOptions: [\n        {\n          value: 0,\n          label: '未满'\n        },\n        {\n          value: 1,\n          label: '已满'\n        },\n        {\n          value: 2,\n          label: '维修中'\n        }],\n      temp: {\n        id: '',\n        roomNumber: '',\n        type: '',\n        rent: '',\n        checkList: [],\n        lived: '',\n        required: false,\n        status: ''\n      },\n      roomFormVisible: false,\n      dialogStatus: '',\n      textMap: {\n        update: 'Edit',\n        create: 'Create'\n      },\n      roomRules: {\n        // type: [{ required: true, message: 'type is required', trigger: 'change' }],\n        // timestamp: [{ type: 'date', required: true, message: 'timestamp is required', trigger: 'change' }],\n        // title: [{ required: true, message: 'title is required', trigger: 'blur' }]\n      },\n      downloadLoading: false,\n\n      applyFormVisible: false,\n      shortRent: true,\n      curRoom: '',\n      applyRules: {\n\n      },\n      applyTemp: {\n        shortRentForm: {\n          day: '',\n          startDay: ''\n        },\n        longRentForm: {\n          month: '',\n          startMonth: ''\n        }\n      },\n      pickerOptions: {\n          disabledDate(time) {\n            return time.getTime() < Date.now()\n          }\n        }\n    }\n  },\n  created() {\n    // this.listQuery.checkList = []\n    this.getList()\n  },\n  methods: {\n    getList() {\n      this.listLoading = true\n      this.getRequest('/room/list', this.listQuery).then(response => {\n        this.list = response.data.items\n        this.total = response.data.total\n\n        // Just to simulate the time of the request\n        setTimeout(() => {\n          this.listLoading = false\n        }, 1.5 * 1000)\n      })\n    },\n    handleFilter() {\n      this.listQuery.page = 1\n      this.getList()\n    },\n    sortChange(data) {\n      const { prop, order } = data\n      if (prop === 'id') {\n        this.sortByID(order)\n      }\n    },\n    sortByID(order) {\n      if (order === 'ascending') {\n        this.listQuery.sort = '+id'\n      } else {\n        this.listQuery.sort = '-id'\n      }\n      this.handleFilter()\n    },\n    resetTemp() {\n      this.temp = {\n        id: '',\n        roomNumber: '1001',\n        type: 1,\n        rent: 1000,\n        checkList: [0],\n        lived: 0,\n        required: false,\n        status: ''\n      }\n    },\n    handleCreate() {\n      this.resetTemp()\n      this.dialogStatus = 'create'\n      this.roomFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['roomForm'].clearValidate()\n      })\n    },\n    createData() {\n      this.$refs['roomForm'].validate((valid) => {\n        if (valid) {\n          // this.temp.id = parseInt(Math.random() * 100) + 1024 // mock a id\n          this.postRequest('/room/update', this.temp).then(() => {\n            this.list.unshift(this.temp)\n            this.roomFormVisible = false\n            this.$notify({\n              title: 'Success',\n              message: 'Created Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          })\n        }\n      })\n    },\n    handleUpdate(row) {\n      this.temp = Object.assign({}, row) // copy obj\n      this.dialogStatus = 'update'\n      this.roomFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['roomForm'].clearValidate()\n      })\n    },\n    updateData() {\n      this.$refs['roomForm'].validate((valid) => {\n        if (valid) {\n          const tempData = Object.assign({}, this.temp)\n          this.postRequest('/room/update', tempData).then(() => {\n            const index = this.list.findIndex(v => v.id === this.temp.id)\n            this.list.splice(index, 1, this.temp)\n            this.roomFormVisible = false\n            this.$notify({\n              title: 'Success',\n              message: 'Update Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          })\n        }\n      })\n    },\n    handleDelete(row, index) {\n      this.$notify({\n        title: 'Success',\n        message: 'Delete Successfully',\n        type: 'success',\n        duration: 2000\n      })\n      this.list.splice(index, 1)\n    },\n    resetApplyTemp() {\n      this.applyTemp = {\n        shortRentForm: {\n          day: '',\n          startDay: ''\n        },\n        longRentForm: {\n          month: '',\n          startMonth: ''\n        }\n      },\n    },\n    handleApply(row) {\n      this.resetApplyTemp()\n      this.applyFormVisible = true\n      this.curRoom = row\n      this.$nextTick(() => {\n        this.$refs['applyForm'].clearValidate()\n      })\n    },\n    createApply() {\n\n    },\n    getSortClass: function(key) {\n      const sort = this.listQuery.sort\n      return sort === `+${key}` ? 'ascending' : 'descending'\n    }\n  }\n}\n",{"version":3,"sources":["Room.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiMA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Room.vue","sourceRoot":"src/views/rms","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"filter-container\">\n      <el-select class=\"filter-item\" v-model=\"listQuery.type\" placeholder=\"房间人数\" :clearable = \"true\" style=\"width: 120px\" @change=\"handleFilter\">\n        <el-option v-for=\"item in typeOptions\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\"/>\n      </el-select>\n\n      <el-select class=\"filter-item\" v-model=\"listQuery.status\" placeholder=\"房间状态\" :clearable = \"true\" style=\"width:120px; margin-left:15px;\" @change=\"handleFilter\">\n        <el-option v-for=\"item in statusOptions\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\"/>\n      </el-select>\n\n      <el-select class=\"filter-item\" v-model=\"listQuery.sort\" style=\"width: 140px; margin-left: 15px;\" @change=\"handleFilter\">\n        <el-option v-for=\"item in sortOptions\" :key=\"item.key\" :label=\"item.label\" :value=\"item.key\" />\n      </el-select>\n\n      <el-button class=\"filter-item\" style=\"margin-left: 10px;\" type=\"primary\" icon=\"el-icon-edit\" @click=\"handleCreate\">\n        Add\n      </el-button>\n    </div>\n    <div class=\"filter-container\">\n      <el-checkbox-group class=\"filter-item\" v-model=\"listQuery.checkList\" @change=\"handleFilter\">\n        <el-checkbox :label=\"0\">空调</el-checkbox>\n        <el-checkbox :label=\"1\">独卫</el-checkbox>\n        <el-checkbox :label=\"2\">洗衣机</el-checkbox>\n      </el-checkbox-group>\n    </div>\n\n    <el-table\n      :key=\"tableKey\"\n      v-loading=\"listLoading\"\n      :data=\"list\"\n      border\n      fit\n      highlight-current-row\n      style=\"width: 100%;\"\n      @sort-change=\"sortChange\"\n    >\n\n      <el-table-column label=\"房间号\" min-width=\"80px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.roomNumber }}</span>\n        </template>\n      </el-table-column>\n      \n      <el-table-column label=\"房间类型\" min-width=\"100px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <el-tag>{{ hash.type[row.type] }}</el-tag>\n        </template>\n      </el-table-column>\n\n      <el-table-column label=\"租金\" min-width=\"100px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>￥{{ row.rent }}</span>\n        </template>\n      </el-table-column>\n\n      <el-table-column label=\"附加服务\" min-width=\"180px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <el-tag v-for=\"item in row.checkList\">{{ hash.checkList[item] }}</el-tag>\n        </template>\n      </el-table-column>\n\n      <el-table-column label=\"剩余床位\" min-width=\"60px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <span>{{ row.type - row.lived }}</span>\n        </template>\n      </el-table-column>\n\n      <el-table-column label=\"房间状态\" min-width=\"100px\" align=\"center\">\n        <template slot-scope=\"{row}\">\n          <el-tag>{{ hash.status[row.status] }}</el-tag>\n        </template>\n      </el-table-column>\n      \n      <el-table-column label=\"操作\" align=\"center\" width=\"300\">\n        <template slot-scope=\"{row,$index}\">\n          <el-button type=\"primary\" size=\"mini\" @click=\"handleApply(row)\">\n            申请租房\n          </el-button>\n          <el-button type=\"primary\" size=\"mini\" @click=\"handleUpdate(row)\">\n            编辑\n          </el-button>\n          <el-button size=\"mini\" type=\"danger\" @click=\"handleDelete(row,$index)\">\n            Delete\n          </el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <pagination v-show=\"total>0\" :total=\"total\" :page.sync=\"listQuery.page\" :limit.sync=\"listQuery.limit\" @pagination=\"getList\" />\n\n    <el-dialog :title=\"textMap[dialogStatus]\" :visible.sync=\"roomFormVisible\">\n      <el-form class=\"form-container\" ref=\"roomForm\" :rules=\"roomRules\" :model=\"temp\" label-position=\"left\" label-width=\"70px\" style=\"width: 400px; margin-left:50px;\">\n        \n        <el-form-item label=\"房间号\" prop=\"roomNumber\">\n          <el-input v-model=\"temp.roomNumber\" placeholder=\"请输入\"/>\n        </el-form-item>\n\n        <el-form-item label=\"房间类型\" prop=\"type\">\n          <el-select v-model=\"temp.type\" placeholder=\"请选择\">\n            <el-option v-for=\"item in typeOptions\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\" />\n          </el-select>\n        </el-form-item>\n\n        <el-form-item label=\"租金\" prop=\"rent\">\n          <el-input v-model=\"temp.rent\" placeholder=\"请输入\"/>\n        </el-form-item>\n\n        <el-form-item label=\"附加服务\">\n          <el-checkbox-group v-model=\"temp.checkList\">\n            <el-checkbox :label=\"0\">空调</el-checkbox>\n            <el-checkbox :label=\"1\">独卫</el-checkbox>\n            <el-checkbox :label=\"2\">洗衣机</el-checkbox>\n          </el-checkbox-group>\n        </el-form-item>\n\n        <el-form-item label=\"已住人数\">\n          <el-input v-model=\"temp.lived\"/>\n        </el-form-item>\n\n        <el-form-item label=\"需要维修\">\n          <el-switch v-model=\"temp.required\"/>\n          </el-switch>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"roomFormVisible = false\">\n          取消\n        </el-button>\n        <el-button type=\"primary\" @click=\"dialogStatus==='create'?createData():updateData()\">\n          确认\n        </el-button>\n      </div>\n    </el-dialog>\n\n    <el-dialog title=\"申请租赁\" :visible.sync=\"applyFormVisible\">\n      <el-form class=\"form-container\" ref=\"applyForm\" :rules=\"applyRules\" v-model=\"applyTemp\" label-position=\"left\" label-width=\"70px\" style=\"width: 400px; margin-left:50px;\">\n        \n        <el-form-item label=\"用户名\">\n          <el-input v-model=\"username\" placeholder=\"请输入用户名\"/>\n        </el-form-item>\n\n        <el-form-item label=\"房间号\">\n          <span>{{ curRoom.roomNumber }}</span>\n        </el-form-item>\n\n        <el-form-item label=\"租赁方式\">\n          <el-radio v-model=\"shortRent\" :label=\"true\">短租</el-radio>\n          <el-radio v-model=\"shortRent\" :label=\"false\">长租</el-radio>\n        </el-form-item>\n\n        <div v-if=\"shortRent\">\n          <el-form-item label=\"租房时长: \">\n            <el-input v-model=\"applyTemp.shortRentForm.day\" placeholder=\"请选择天数\"/>\n          </el-form-item>\n          <el-date-picker\n            v-model=\"applyTemp.shortRentForm.startDay\"\n            type=\"date\"\n            placeholder=\"选择起始日期\"\n            :picker-options=\"pickerOptions\"\n          />\n          <el-form-item label=\"价格\">\n            <span>￥{{ curRoom.rent * applyTemp.shortRentForm.day }}</span>\n          </el-form-item>\n        </div>\n        <div v-else>\n          <el-form-item label=\"租房时长: \">\n            <el-input v-model=\"applyTemp.longRentForm.month\" placeholder=\"请选择月数\"/>\n          </el-form-item>\n          <el-date-picker\n            v-model=\"applyTemp.longRentForm.startMonth\"\n            type=\"month\"\n            placeholder=\"选择起始月份\"\n            :picker-options=\"pickerOptions\"\n          />\n          <el-form-item label=\"价格\">\n            <span>￥{{ curRoom.rent * 20 * applyTemp.longRentForm.month }}</span>\n          </el-form-item>\n        </div>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"roomFormVisible = false\">\n          取消\n        </el-button>\n        <el-button type=\"primary\" @click=\"createApply()\">\n          确认\n        </el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\n// import waves from '@/directive/waves' // waves directive\nimport Pagination from '@/components/Pagination' // secondary package based on el-pagination\n\nexport default {\n  name: 'ComplexTable',\n  components: { Pagination },\n  // directives: { waves },\n  computed: {\n    username() {\n      return sessionStorage.getItem('username')\n    }\n  },\n  data() {\n    return {\n      tableKey: 0,\n      list: null,\n      total: 0,\n      listLoading: true,\n      listQuery: {\n        page: 1,\n        limit: 20,\n        type: \"\",\n        status: \"\",\n        checkList: [],\n        sort: '+id'\n      },\n      sortOptions: [{ label: 'ID Ascending', key: '+id' }, { label: 'ID Descending', key: '-id' }],\n      hash: {\n        type: {\n          1: '单人间',\n          2: '双人间',\n          4: '四人间'\n        },\n        status: {\n          0: '未满',\n          1: '已满',\n          2: '维修中'\n        },\n        checkList: {\n          0: '空调',\n          1: '独卫',\n          2: '洗衣机'\n        }\n      },\n      typeOptions: [\n        {\n          value: 1,\n          label: '单人间'\n        },\n        {\n          value: 2,\n          label: '双人间'\n        },\n        {\n          value: 4,\n          label: '四人间'\n        }],\n      statusOptions: [\n        {\n          value: 0,\n          label: '未满'\n        },\n        {\n          value: 1,\n          label: '已满'\n        },\n        {\n          value: 2,\n          label: '维修中'\n        }],\n      temp: {\n        id: '',\n        roomNumber: '',\n        type: '',\n        rent: '',\n        checkList: [],\n        lived: '',\n        required: false,\n        status: ''\n      },\n      roomFormVisible: false,\n      dialogStatus: '',\n      textMap: {\n        update: 'Edit',\n        create: 'Create'\n      },\n      roomRules: {\n        // type: [{ required: true, message: 'type is required', trigger: 'change' }],\n        // timestamp: [{ type: 'date', required: true, message: 'timestamp is required', trigger: 'change' }],\n        // title: [{ required: true, message: 'title is required', trigger: 'blur' }]\n      },\n      downloadLoading: false,\n\n      applyFormVisible: false,\n      shortRent: true,\n      curRoom: '',\n      applyRules: {\n\n      },\n      applyTemp: {\n        shortRentForm: {\n          day: '',\n          startDay: ''\n        },\n        longRentForm: {\n          month: '',\n          startMonth: ''\n        }\n      },\n      pickerOptions: {\n          disabledDate(time) {\n            return time.getTime() < Date.now()\n          }\n        }\n    }\n  },\n  created() {\n    // this.listQuery.checkList = []\n    this.getList()\n  },\n  methods: {\n    getList() {\n      this.listLoading = true\n      this.getRequest('/room/list', this.listQuery).then(response => {\n        this.list = response.data.items\n        this.total = response.data.total\n\n        // Just to simulate the time of the request\n        setTimeout(() => {\n          this.listLoading = false\n        }, 1.5 * 1000)\n      })\n    },\n    handleFilter() {\n      this.listQuery.page = 1\n      this.getList()\n    },\n    sortChange(data) {\n      const { prop, order } = data\n      if (prop === 'id') {\n        this.sortByID(order)\n      }\n    },\n    sortByID(order) {\n      if (order === 'ascending') {\n        this.listQuery.sort = '+id'\n      } else {\n        this.listQuery.sort = '-id'\n      }\n      this.handleFilter()\n    },\n    resetTemp() {\n      this.temp = {\n        id: '',\n        roomNumber: '1001',\n        type: 1,\n        rent: 1000,\n        checkList: [0],\n        lived: 0,\n        required: false,\n        status: ''\n      }\n    },\n    handleCreate() {\n      this.resetTemp()\n      this.dialogStatus = 'create'\n      this.roomFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['roomForm'].clearValidate()\n      })\n    },\n    createData() {\n      this.$refs['roomForm'].validate((valid) => {\n        if (valid) {\n          // this.temp.id = parseInt(Math.random() * 100) + 1024 // mock a id\n          this.postRequest('/room/update', this.temp).then(() => {\n            this.list.unshift(this.temp)\n            this.roomFormVisible = false\n            this.$notify({\n              title: 'Success',\n              message: 'Created Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          })\n        }\n      })\n    },\n    handleUpdate(row) {\n      this.temp = Object.assign({}, row) // copy obj\n      this.dialogStatus = 'update'\n      this.roomFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['roomForm'].clearValidate()\n      })\n    },\n    updateData() {\n      this.$refs['roomForm'].validate((valid) => {\n        if (valid) {\n          const tempData = Object.assign({}, this.temp)\n          this.postRequest('/room/update', tempData).then(() => {\n            const index = this.list.findIndex(v => v.id === this.temp.id)\n            this.list.splice(index, 1, this.temp)\n            this.roomFormVisible = false\n            this.$notify({\n              title: 'Success',\n              message: 'Update Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          })\n        }\n      })\n    },\n    handleDelete(row, index) {\n      this.$notify({\n        title: 'Success',\n        message: 'Delete Successfully',\n        type: 'success',\n        duration: 2000\n      })\n      this.list.splice(index, 1)\n    },\n    resetApplyTemp() {\n      this.applyTemp = {\n        shortRentForm: {\n          day: '',\n          startDay: ''\n        },\n        longRentForm: {\n          month: '',\n          startMonth: ''\n        }\n      },\n    },\n    handleApply(row) {\n      this.resetApplyTemp()\n      this.applyFormVisible = true\n      this.curRoom = row\n      this.$nextTick(() => {\n        this.$refs['applyForm'].clearValidate()\n      })\n    },\n    createApply() {\n\n    },\n    getSortClass: function(key) {\n      const sort = this.listQuery.sort\n      return sort === `+${key}` ? 'ascending' : 'descending'\n    }\n  }\n}\n</script>\n"]}]}